// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

enum ORDER_STATUS {
  PENDING
  CANCELLED
  DELIVERED
}

enum GENDER {
  MALE
  FEMALE
  BOTH
}

enum NOTIFICATION_STATUS {
  READ
  UNREAD
}

model User {
  id           String         @id @default(cuid())
  name         String
  email        String         @unique
  password     String
  image        String?
  role         ROLE
  cart         Cart?
  notification Notification[]
  Review       Review[]
  Order        Order[]
  Address      Address[]
  WishListItem WishListItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String         @id @default(cuid())
  name         String
  price        Float
  quantity     Int
  gender       GENDER         @default(BOTH)
  description  String         @db.Text
  categoryId   String
  CartItem     CartItem[]
  WishListItem WishListItem[]
  Image        Image[]
  Review       Review[]
  OrderItem    OrderItem[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id            String     @id @default(cuid())
  totalPrice    Float
  totalQuantity Int
  userId        String     @unique
  cartItem      CartItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String @id @default(cuid())
  productId String
  quantity  Int
  cartId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WishListItem {
  id        String @id @default(cuid())
  productId String
  userId    String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model Image {
  id        String @id @default(cuid())
  url       String
  fileId    String
  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String @id @default(cuid())
  content   String
  // rating should be max 5 and min 1
  rating    Int
  userId    String
  productId String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Order {
  id          String       @id @default(cuid())
  totalPrice  Float
  orderStatus ORDER_STATUS @default(PENDING)
  userId      String
  street      String
  city        String
  state       String
  phone       String
  orderItem   OrderItem[]

  notification Notification[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  price     Float
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id     String @id @default(cuid())
  street String
  city   String
  state  String
  phone  String
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id      String              @id @default(cuid())
  content String
  userId  String
  orderId String
  status  NOTIFICATION_STATUS @default(UNREAD)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
